snippet P
	return new Promise((resolve, reject) => {
		${1}
	})

snippet f
	(${1}) => {
		${3}
	}${2}

snippet fu
	function (${1}) {
		${2}
	}

snippet ca
	.catch(err => {
		${1:reject(err)}
	})

snippet ok
	console.log('(ヘ･_･)ヘ┳━┳')

snippet err
	console.log('(╯°□°）╯︵ ┻━┻')

snippet redux
	import React, { Component } from 'react'
	import { connect } from 'react-redux'
	import { bindActionCreators } from 'redux'

	import * as actions from './actions'

	import style from './Element.styl'

	class Element extends Component {
		render () {
			return <div className={style.element}>
			</div>
		}
	}

	const mapStateToProps = state => ({
		elementProp: state.elementProp
	})

	const mapDispatchToProps = dispatch => ({
		actions: bindActionCreators(actions, dispatch)
	})

	export default connect(mapStateToProps, mapDispatchToProps)(Element)


snippet react
	import React from 'react'

	export default (${1}) =>
		<div>${2}
		</div>


snippet reactclass
	import React, { Component } from 'react'
	import PropTypes from 'prop-types'

	class Element extends Component {

		static propTypes = {
		}

		render () {
			return <div>
			</div>
		}
	}

	export default Element
